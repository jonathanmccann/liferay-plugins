/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sampleservicebuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sampleservicebuilder.model.Bar;
import com.liferay.sampleservicebuilder.model.BarModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Bar service. Represents a row in the &quot;SSB_Bar&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sampleservicebuilder.model.BarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BarImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BarImpl
 * @see com.liferay.sampleservicebuilder.model.Bar
 * @see com.liferay.sampleservicebuilder.model.BarModel
 * @generated
 */
public class BarModelImpl extends BaseModelImpl<Bar> implements BarModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bar model instance should use the {@link com.liferay.sampleservicebuilder.model.Bar} interface instead.
	 */
	public static final String TABLE_NAME = "SSB_Bar";
	public static final Object[][] TABLE_COLUMNS = {
			{ "barId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SSB_Bar (barId LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table SSB_Bar";
	public static final String ORDER_BY_JPQL = " ORDER BY bar.barId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SSB_Bar.barId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sampleservicebuilder.model.Bar"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sampleservicebuilder.model.Bar"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final String MAPPING_TABLE_SSB_FOOS_BARS_NAME = "SSB_Foos_Bars";
	public static final Object[][] MAPPING_TABLE_SSB_FOOS_BARS_COLUMNS = {
			{ "barId", Types.BIGINT },
			{ "fooId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_SSB_FOOS_BARS_SQL_CREATE = "create table SSB_Foos_Bars (barId LONG not null,fooId LONG not null,primary key (barId, fooId))";
	public static final boolean FINDER_CACHE_ENABLED_SSB_FOOS_BARS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.SSB_Foos_Bars"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sampleservicebuilder.model.Bar"));

	public BarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _barId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBarId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _barId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Bar.class;
	}

	@Override
	public String getModelClassName() {
		return Bar.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("barId", getBarId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long barId = (Long)attributes.get("barId");

		if (barId != null) {
			setBarId(barId);
		}
	}

	@Override
	public long getBarId() {
		return _barId;
	}

	@Override
	public void setBarId(long barId) {
		_barId = barId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Bar.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Bar toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Bar)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BarImpl barImpl = new BarImpl();

		barImpl.setBarId(getBarId());

		barImpl.resetOriginalValues();

		return barImpl;
	}

	@Override
	public int compareTo(Bar bar) {
		long primaryKey = bar.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Bar)) {
			return false;
		}

		Bar bar = (Bar)obj;

		long primaryKey = bar.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Bar> toCacheModel() {
		BarCacheModel barCacheModel = new BarCacheModel();

		barCacheModel.barId = getBarId();

		return barCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(3);

		sb.append("{barId=");
		sb.append(getBarId());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(7);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sampleservicebuilder.model.Bar");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>barId</column-name><column-value><![CDATA[");
		sb.append(getBarId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Bar.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Bar.class };
	private long _barId;
	private Bar _escapedModel;
}